%!PS-Adobe-3.0
%%Title: q_kin.inc
%%For: Alexander Pukhov
%%Creator: a2ps version 4.13
%%CreationDate: Wed Sep 17 13:02:38 2008
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 5
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% composite fonts for ASCII-EUC mixed string
% Version 1.2 1/31/1990
% Orignal Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(static void lorrot\(Real rapidity, int ntot\)) N
({) N
(    static Real rapid___ = 0;) N
(    static Real sh = 0;) N
(    static Real ch = 1;) N
(    Real ee, pp;) N
(    int nv;) N
() N
(    if \(rapidity != rapid___\) ) N
(    {) N
() S 8 T (rapid___ = rapidity;) N
() S 8 T (sh = sinh\(rapidity\);) N
() S 8 T (ch = sqrt\(sh * sh + 1\);) N
(    }) N
(    if \(rapidity\) for\(nv=4*ntot-4; nv>=0; nv -=4\)) N
(    {  ee = pvect[nv];) N
(       pp = pvect[nv+3];) N
(       pvect[nv] = ee * ch + pp * sh;) N
(       pvect[nv+3] = ee * sh + pp * ch;) N
(    }) N
(} ) N
() N
() N
(static int nstep=0;) N
() N
() N
(#define DEPTH 10) N
() N
(static Real sqrt_S, rapidity, stop, sbot, pcm;) N
(    double ssmin, ssmax;) N
(static Real tfact0;) N
(static int nout1;) N
() N
(static Real pm[PLISTLEN];) N
() N
(static int nvpos0, nvposx, nvposy;) N
() N
(static int nvout[DEPTH][2], nvin[DEPTH];) N
(static int  lnkbab[DEPTH], lnkleg[DEPTH];) N
(static Real  summas[DEPTH][2];) N
(static int nmsreg[DEPTH][2], nmscut[DEPTH][2], nss;) S 56 T () N
(static int nsph[DEPTH];) N
() N
(static Real beta[2];) N
() N
(typedef  struct) N
({  int ncsreg[2];) N
(   int ncscut[2];) N
(   char  lvpole[PLISTLEN];) N
(   int  itypep;) N
(   Real sph_we;) N
(}  sphereStr;) N
(   ) N
(static  sphereStr  sph_inf[DEPTH][10]; ) N
() N
(static Real  cmfun\( Real E,Real PM1,Real PM2\)) N
({) N
(  Real e2,s,d;) N
(  e2=E*E;) N
(  s=PM1+PM2;) N
(  d=PM1-PM2;) N
(q_kin.inc) (\320\241\321M-^B\321M-^@\320\260\320\275\320\270\321M-^F\320\260 1/10) (15 \320\241\320\265\320\275 08 23:51) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  return sqrt\(\(e2-s*s\)*\(e2-d*d\)\)/\(2*E\);     ) p n
(}) N
() N
(int mkmom\(double *x, double *tfact /* ,  Real *sf_fact*/\)) N
({) N
(  int i,k,l;) N
(  int nx=0;) N
(  double fct,fct0,fct1, fct2;) N
(  Real  pIn[2][4]={{0,0,0,0},{0,0,0,0}};) N
(  Real  pXY[2][4]={{0,1,0,0},{0,0,1,0}};) N
(    ) N
(  Real  xcos, xfi, parfi;) N
(  double cosmin, cosmax,parcos;) N
(  Real ytilda=0; ) N
(  ) N
(  int  i__2;) N
(  Real d__1;) N
() N
(  Real ff, al;) N
(  Real  xx, bes;) N
( ) N
(  Real  rstilda,  pcmtilda, xtilda; ) N
(  double stilda;) N
(  int  ns;) N
() N
(  Real psy1, psy2, x1,x2;) N
() N
(  double  smin, smax;) N
(  Real  amass[DEPTH][2];) N
() N
(  int nvpole;) N
(  int nvpos;) N
() N
(  Real hsum[2], hdif;) N
() N
(  Real fct_1__;) N
(  int nsing;) N
(  ) N
(  sing_struct singar[200];) N
() N
(  *tfact = tfact0;) N
() N
(    ++nstep;) N
(/* **   MOMENTS */) N
(    if \(nin_int == 2\) ) N
(    {   Real y1,y2;) N
() S 8 T (if \(sf_num[0] || sf_num[1]\) ) N
() S 8 T ({) N
() S 8 T (    nsing = 0;) N
() S 8 T (    getreg_\(&nsing, singar, 0., 1., nss\);) N
() S 8 T (    bes =  beta[0]+ beta[1];) N
() S 8 T (    if \(bes >= 1.\) al = 1.; else if \(nsing\)  al = 0.5; else al = 0.;) N
() N
() S 8 T (    xx = x[nx++];) N
() S 8 T (    if \(xx < al\) ) N
() S 8 T (    {) N
() S 8 T () S 16 T (xx /= al;) N
() S 8 T () S 16 T (regfun_\(2,nsing,singar,ssmin,ssmax,xx,&stilda,&fct1\);) N
() S 8 T (    } else ) N
() S 8 T (    {   ) N
() S 8 T () S 16 T (if\(xx==al\) xx=1;else xx = \(1 - xx\) / \(1 - al\);) N
() S 8 T () S 16 T (stilda=stop-pow\(xx*pow\(stop-ssmin,bes\)+\(1-xx\)*pow\(stop-ssmax,bes) N
(q_kin.inc) (\320\241\321M-^B\321M-^@\320\260\320\275\320\270\321M-^F\320\260 2/10) (15 \320\241\320\265\320\275 08 23:51) title
border
grestore
(\320M-^_\320\265\321M-^G\320\260\321M-^B\320\260\320\273 Alexander Pukhov) rhead
(q_kin.inc) (1/5) (17 \320\241\320\265\320\275\321M-^B\321M-^O\320\261\321M-^@\321M-^O 2008, \320\241\321M-^@\320\265\320\264\320\260) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(\),1/bes\);) p n
() S 8 T () S 16 T (regfct_\(2,nsing,singar,ssmin,ssmax,stilda,&fct1\);) N
() S 8 T (    }) N
() S 8 T (    fct1 /= stop-sbot;) N
() S 8 T (    if \(bes < 1\) ) N
() S 8 T (    {) N
() S 8 T (        ff = pow\(1 - ssmin/stop, bes\) - pow\(1 - ssmax/stop, bes\);) N
() S 8 T () S 16 T (fct2 = ff / bes * pow\( 1 - stilda/stop, 1 - bes\);) N
() S 8 T () S 16 T (*tfact *= ff/ \(al * fct2 / fct1 + \(1 - al\)\);) N
() S 8 T (    } else  *tfact *= fct1;) N
() S 8 T (    ) N
(            xtilda=\(stilda-sbot\)/\(stop-sbot\);) N
() N
() S 8 T (    if \(sf_num[0] && sf_num[1]\) ) N
() S 8 T (    { Real yy = log\(1/xtilda\); ) N
() S 8 T () S 16 T (xx = x[nx++];) N
() S 8 T () S 16 T (if \(beta[0] < 1. && beta[1] < 1.\) ) N
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T (    al = beta[1]/\(beta[0]+beta[1]\);) N
() S 8 T () S 16 T (    if \(xx < al\) ) N
() S 8 T () S 16 T (    {) N
() S 8 T () S 16 T () S 24 T (xx /= al;) N
() S 8 T () S 16 T () S 24 T (psy1 = pow\(xx, 1 / beta[0]\);) N
() S 8 T () S 16 T () S 24 T (psy2 = 1 - psy1;) N
() S 8 T () S 16 T (    } else ) N
() S 8 T () S 16 T (    {) N
() S 8 T () S 16 T () S 24 T (if\(xx==al\) xx=1; else xx = \(1 - xx\) / \(1 - al\);) N
() S 8 T () S 16 T () S 24 T (psy2 = pow\(xx, 1 / beta[1]\);) N
() S 8 T () S 16 T () S 24 T (psy1 = 1 - psy2;) N
() S 8 T () S 16 T (    }) N
() S 8 T () S 16 T (    y1 = yy * psy1;) N
() S 8 T () S 16 T (    y2 = yy * psy2;) N
() N
() S 8 T () S 16 T (    *tfact *=pow\(divy_\(y1\),beta[0]-1\)*pow\(divy_\(y2\),beta[1]-1\)/) N
() S 8 T () S 16 T (    ) S 24 T (     \(pow\(psy1,1-beta[0]\)+pow\(psy2,1-beta[1]\)\);) N
() N
() S 8 T () S 16 T (    if \(bes < 1.\)  *tfact *= pow\( divy_\(yy\),1-bes\);) N
() S 8 T () S 16 T (     else          *tfact *= bes*pow\(yy,bes-1\);) N
() S 8 T () S 16 T (} else if \(beta[0] < 1.\) ) N
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T (    psy1 = pow\(xx,  1 / beta[0]\);) N
() S 8 T () S 16 T (    y1 = yy * psy1;) N
() S 8 T () S 16 T (    y2 = yy * \(1 - psy1\);) N
() S 8 T () S 16 T (    *tfact *=  pow\(yy, *beta\)*pow\(divy_\(y1\),beta[0]-1\);) N
() S 8 T () S 16 T (} else if \(beta[1] < 1.\) ) N
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T (    psy2 = pow\(xx,  1 / beta[1]\);) N
() S 8 T () S 16 T (    y2 = yy * psy2;) N
() S 8 T () S 16 T (    y1 = yy * \(1 - psy2\);) N
() S 8 T () S 16 T (    *tfact *= pow\(yy,beta[1]\)*pow\(divy_\(y2\),beta[1]-1\);) N
() S 8 T () S 16 T (} else ) N
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T (    y1 = yy * xx;) N
() S 8 T () S 16 T (    y2 = yy - y1;) N
() S 8 T () S 16 T (    *tfact *= yy;) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T (x1 = exp\(-y1\);) N
() S 8 T () S 16 T (x2 = exp\(-y2\);) N
(                ytilda=\(y2-y1\)/2;) N
() S 8 T (    } else if \(sf_num[0]\) ) N
() S 8 T (    {   Real e2=sqrt\(pm[1]*pm[1]+pcm*pcm\);) N
() S 8 T () S 16 T (x1 = xtilda;) N
(q_kin.inc) (\320\241\321M-^B\321M-^@\320\260\320\275\320\270\321M-^F\320\260 3/10) (15 \320\241\320\265\320\275 08 23:51) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T (x2 = 1.;) N
(                ytilda=0.5*log\(\(e2+\(2*x1-1\)*pcm\)/\(e2+pcm\)\);) N
() S 8 T (    } else ) N
() S 8 T (    {   Real e1=sqrt\(pm[0]*pm[0]+pcm*pcm\);) N
() S 8 T () S 16 T (x1 = 1.;) N
() S 8 T () S 16 T (x2 = xtilda;) N
(                ytilda=-0.5*log\(\(e1+\(2*x2-1\)*pcm\)/\(e1+pcm\)\);) N
() S 8 T (    }) N
() S 8 T (} else ) N
() S 8 T ({) N
() S 8 T (    x1 = 1.;) N
() S 8 T (    x2 = 1.;) N
() S 8 T (    stilda = sqrt_S*sqrt_S;) N
(            ytilda=0;) N
() S 8 T (}) N
(        rstilda = sqrt\(stilda\);) N
(        pcmtilda=cmfun\(rstilda,pm[0],pm[1]\);) N
() S 8 T (pIn[0][3]=pcmtilda;) N
() S 8 T (pIn[1][3]=-pcmtilda;) N
() N
(     ) N
(/*  *sf_fact= *tfact/tfact0; */) N
(    }) N
(/* *  FILLING ZERO COMPONENTS FOR in-PARTICLES */) N
(    ) N
(    for \(k = 0; k < nin_int; ++k\) pvFill\(pm[k],pIn[k],k+1\);) N
() S 8 T ( ) N
(    if \(nin_int == 2\)   *tfact /= 4*pcmtilda *rstilda; else ) N
(    { rstilda = pm[0]; *tfact /= rstilda * 2; ytilda=0;} ) N
() N
(    ) N
(/* *    X & Y AXISES */) N
() N
(    pvFill\(0,pXY[0],nvposx\);) N
(    pvFill\(0,pXY[1],nvposy\);  ) N
() N
(    nvpos = nvpos0;) N
(    nvpole =nvpos++;) N
(    ) N
(/* *    MASS INTEGRATION */) N
() N
(    for \(i = 0; i < nout1; ++i\) ) N
(    {   Real sval= i? amass[lnkbab[i]][lnkleg[i]]: rstilda;   ) N
() N
(       ) S 8 T (for \(k = 0; k < 2; ++k\) ) N
() S 8 T ({) N
() S 8 T (    if \(kinmtc_1[i].lvout[k][1]\) ) N
() S 8 T (    { double sqmass;) N
(              Real  xx=x[nx++];) N
() S 8 T (        d__1=  k?  sval - amass[i][0] : sval - summas[i][1];) N
() S 8 T () S 16 T (         ) N
() S 8 T (        smax = d__1 * d__1;) N
() S 8 T () S 16 T () N
() S 8 T () S 16 T (d__1 = summas[i][k];) N
() S 8 T () S 16 T (smin = d__1 * d__1;) N
() N
() S 8 T () S 16 T (if \(nmscut[i][k]\) rancor_\(&smin, &smax,0., 1., nmscut[i][k]\);) N
() S 8 T () S 16 T () N
() S 8 T () S 16 T (if \(smin >= smax\)  {*tfact = 0.; return 0;}) N
() S 8 T () S 16 T () N
() S 8 T () S 16 T (if \(nmsreg[i][k] \)) N
() S 8 T () S 16 T ({) N
(q_kin.inc) (\320\241\321M-^B\321M-^@\320\260\320\275\320\270\321M-^F\320\260 4/10) (15 \320\241\320\265\320\275 08 23:51) title
border
grestore
(\320M-^_\320\265\321M-^G\320\260\321M-^B\320\260\320\273 Alexander Pukhov) rhead
(q_kin.inc) (2/5) (17 \320\241\320\265\320\275\321M-^B\321M-^O\320\261\321M-^@\321M-^O 2008, \320\241\321M-^@\320\265\320\264\320\260) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T (    nsing = 0;) N
() S 8 T () S 16 T (    getreg_\(&nsing, singar, 0., 1.,nmsreg[i][k]\);) N
() S 8 T () S 16 T (    regfun_\(2,nsing,singar,smin,smax,xx,&sqmass,&fct\);) N
() S 8 T () S 16 T (} else) N
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T (    sqmass = xx * smax + \(1 - xx\) * smin;) N
() S 8 T () S 16 T (    fct = smax - smin;) N
() S 8 T () S 16 T (} ) N
() S 8 T () S 16 T (amass[i][k] = sqrt\(sqmass\);) N
() S 8 T () S 16 T (*tfact *= fct;) N
() S 8 T (    }) N
() S 8 T (    else amass[i][k]= summas[i][k];) N
() S 8 T (}) N
(    }) N
() N
(    lvtonv\(kinmtc_1[0].lvin, 0 , nvin[0]\); /*very stupid*/ ) N
() N
(        ) N
(    for \(i = 0; i < nout1; ++i\)  /*  MAIN CYCLE */) N
(    {   int ns___=nsph[i]-1;) N
() S 8 T (if \(i == 0 && nin_int == 1\)  xcos = drandXX\(\) /* was fixed  0.1 */; ) N
(                               else  xcos = x[nx++];) N
() S 8 T (al = 0.;) N
() S 8 T (l = 0;) N
() S 8 T (if \(i == 0 || \(i == 1 && nin_int == 1\)\) ) N
() S 8 T ({) N
() S 8 T (    xfi = drandXX\(\);  /* was fixed  0.1;    */) N
(            for\(;l<=ns___;l++\)) N
() S 8 T (    {  al +=  sph_inf[i][l].sph_we;) N
() S 8 T (       if \(xcos <= al\) ns___ = l;) N
() S 8 T (    }) N
() S 8 T (    xcos = \(al - xcos\) / sph_inf[i][ns___].sph_we;) N
() S 8 T (} else ) N
() S 8 T ({) N
() S 8 T (    xfi = x[nx++];) N
(            for\(;l<=ns___;l++\)) N
(            {) N
() S 8 T (       al += sph_inf[i][l].sph_we;) N
() S 8 T (       if \(xfi <= al\) ns___ = l;) N
() S 8 T (    }) N
() S 8 T (    xfi = \(al - xfi\) /sph_inf[i][ns___].sph_we;) N
() S 8 T (}) N
() S 8 T (lvtonv\( sph_inf[i][ns___].lvpole,nin_int, nvpole\);) N
() N
() S 8 T (decay_0\(nvin[i], amass[i][0], amass[i][1], &fct0\);) N
() S 8 T (if\(fct0==0.\) {*tfact=0.; return 0;}) N
() S 8 T (decay_1\(nvpole, hsum, &hdif\);) N
() N
() S 8 T (cosmin = -1;) N
() S 8 T (cosmax = 1;) N
() S 8 T (nsing = 0;) N
() S 8 T (for \(k = 0; k < 2; ++k\) ) N
() S 8 T ({) N
() S 8 T (    d__1 = \(\(k << 1\) - 1\) / hdif;) N
(            getreg_\(&nsing,singar,hsum[k],d__1,sph_inf[i][ns___].ncsreg[k]\);) N
() S 8 T (    rancor_\(&cosmin,&cosmax,hsum[k],d__1,sph_inf[i][ns___].ncscut[k]\);) N
() S 8 T (    if \(cosmin >= cosmax\) {*tfact = 0.; return 0;}) N
() S 8 T (}) N
() S 8 T (regfun_\(sph_inf[i][ns___].itypep,nsing,singar,cosmin,cosmax,xcos,&parcos) N
(,&fct\);) N
() S 8 T (fct_1__ = sph_inf[i][ns___].sph_we / fct;) N
() S 8 T (parfi = \(xfi * 2 - 1\) * M_PI;) N
(q_kin.inc) (\320\241\321M-^B\321M-^@\320\260\320\275\320\270\321M-^F\320\260 5/10) (15 \320\241\320\265\320\275 08 23:51) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (decay_3\(nvposy, parcos, parfi, nvout[i][0], nvout[i][1]\);) N
() N
() S 8 T () N
() S 8 T (i__2 = nsph[i];) N
() S 8 T (for \(ns = 0; ns < i__2; ++ns\)  if \(ns != ns___\)) N
() S 8 T ({) N
() S 8 T (    lvtonv\(sph_inf[i][ns].lvpole, nin_int, nvpole\);) N
() S 8 T (    decay_1\(nvpole, hsum, &hdif\);) N
() S 8 T (    decay_2\(nvout[i][1], &parcos\);) N
() S 8 T (    cosmin = -1;) N
() S 8 T (    cosmax = 1;) N
() S 8 T (    nsing = 0;) N
() S 8 T (    for \(k = 0; k < 2; ++k\) ) N
() S 8 T (    {) N
() S 8 T () S 16 T (d__1 = \(\(k << 1\) - 1\) / hdif;) N
() S 8 T () S 16 T (getreg_\(&nsing,singar,hsum[k],d__1,sph_inf[i][ns].ncsreg[k]\);) N
() S 8 T () S 16 T (rancor_\(&cosmin,&cosmax,hsum[k],d__1,sph_inf[i][ns].ncscut[k]\);) N
() S 8 T () S 16 T (if \(cosmin>=parcos || parcos>=cosmax\){*tfact=0.; return 0;}) N
() S 8 T (    }) N
() S 8 T (    regfct_\(sph_inf[i][ns].itypep,nsing,singar,cosmin,cosmax,parcos, &fc) N
(t\);) N
() S 8 T (    fct_1__ += sph_inf[i][ns].sph_we/ fct;) N
() S 8 T (}) N
() S 8 T (*tfact = *tfact * fct0 / fct_1__;) N
(    }) N
(    if\(nin_int==2\)) N
(    { if\(sf_num[0]\) x[0]= x1;) N
(      if\(sf_num[1]\) x[1]= x2;) N
(      lorrot\(rapidity+ytilda,nin_int+nout_int\);        ) N
(    } else lorrot\(rapidity,nin_int+nout_int\);) N
(    ) N
() N
(    if\(!finite\(*tfact\)\)) N
(    { *tfact=0; fprintf\(stderr,"mkmom: infinite factor\\n"\);) N
(       return 0;) N
(    }) N
(#ifdef pvect) N
(#undef pvect) N
({ extern double  pvect[];) N
(  int i;) N
(  for\(i=0;i<\(nin_int+nout_int\)*4;i++\) ) N
(  { pvect[i]=\(double\)pvectL[i];) N
(    if\(!finite\(pvect[i]\)\) {*tfact=0; return;}) N
(  }) N
(}) N
(#else ) N
() N
( for\(i=0;i<\(nin_int+nout_int\)*4;i++\) if\(!finite\(pvect[i]\)\) {*tfact=0; return 0;}) N
() N
(#endif) N
() N
( return 0;) N
(}    ) N
() N
(    ) N
() N
(int imkmom\(double P1, double P2\)) N
({) N
(    int i, j, k, l,ns;) N
(    char lvbuf[PLISTLEN];) N
(    int ndim;) N
(    beta[0]=sf_be[0];) N
(q_kin.inc) (\320\241\321M-^B\321M-^@\320\260\320\275\320\270\321M-^F\320\260 6/10) (15 \320\241\320\265\320\275 08 23:51) title
border
grestore
(\320M-^_\320\265\321M-^G\320\260\321M-^B\320\260\320\273 Alexander Pukhov) rhead
(q_kin.inc) (3/5) (17 \320\241\320\265\320\275\321M-^B\321M-^O\320\261\321M-^@\321M-^O 2008, \320\241\321M-^@\320\265\320\264\320\260) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    beta[1]=sf_be[1];) p n
(    physValRec * pList;) N
() N
(    if\(nin_int==2\)  ) N
(    {  ) N
(       ndim = nout_int * 3 - 5;) N
(       if \(sf_num[0]\) ndim++;) N
(       if \(sf_num[1]\) ndim++;) N
(       tfact0 = 2*M_PI*389379660.0;) N
(    }else { tfact0 = 2*M_PI; if\(nout_int==2\) ndim=1; else ndim = nout_int * 3 - ) N
(7;}) N
(    ) N
(    for \(i=0; i <  nin_int + nout_int; i++\) pinf_int\(proces_1.nsub,i+1,pm+i,NULL) N
(\);) N
() N
(    nout1 = nout_int - 1;) N
(    if\(nout1>DEPTH\) return 0;) N
(    nvposx = nin_int + nout_int + 1;) N
(    nvposy = nvposx + 1;) N
(    nvpos0 =  nvposy + 1;) N
() N
(/* *  NVOUT\( , \) FILLING */) N
(    for \(i = 0; i < nout1; ++i\)  for \(k = 0; k < 2; ++k\) ) N
(    {) N
(       if \(kinmtc_1[i].lvout[k][1]\) nvout[i][k] = nvpos0++;) N
(       else                         nvout[i][k] = kinmtc_1[i].lvout[k][0];   ) N
(    }) N
(    ) N
(    nvin[0] = nvpos0++;) N
(    for \(i = 1; i < nout1; ++i\) ) N
(    {   nvin[i]=0;) N
() S 8 T (for \(j = 0; j < i; ++j\) for \(k = 0; k < 2; ++k\) ) N
() S 8 T ({) N
() S 8 T (   if \(eqvect_\(kinmtc_1[i].lvin, kinmtc_1[j].lvout[k]\)\) ) N
() S 8 T (   {) N
(               nvin[i] = nvout[j][k];) N
() S 8 T (       lnkbab[i] = j;) N
() S 8 T (       lnkleg[i] = k;) N
() S 8 T (   }) N
() S 8 T (}) N
() S 8 T (if\(!nvin[i]\) { fprintf\(stderr,"Error in kinematics \\n"\); sortie\(52\); }) N
(    }) N
() N
() N
(    for \(i = 0; i < nout1; ++i\) for \(k = 0; k < 2; ++k\) ) N
(    {   ) N
(      Real ss = 0.; ) N
(      int pn;) N
(      ) N
(      for\(j=0; pn=kinmtc_1[i].lvout[k][j];j++\) ss += pm[pn - 1];) N
(      summas[i][k] = ss;) N
(    }) N
() N
(    if \(nin_int == 2\) ) N
(    {  Real m1=sf_num[0]?sf_mass[0]:pm[0];) N
(       Real m2=sf_num[1]?sf_mass[1]:pm[1];) N
(       ) N
(       incomkin\(m1, m2, P1, P2,  &sqrt_S, &pcm, &rapidity\);) N
() N
(       ssmin=pm[0]+pm[1]; ) N
(       if\(ssmin<summas[0][0]+summas[0][1]\) ssmin=summas[0][0]+summas[0][1];) N
(       ssmin*=ssmin;      ) N
(q_kin.inc) (\320\241\321M-^B\321M-^@\320\260\320\275\320\270\321M-^F\320\260 7/10) (15 \320\241\320\265\320\275 08 23:51) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
( ) p n
(       if\( sf_num[0] && sf_num[1] \) {sbot=0;stop=4*pcm*pcm;}) N
(       else if\(sf_num[0]\){sbot=m2*m2; stop=sbot+2*pcm*\(pcm+sqrt\(pcm*pcm+sbot\)\);}) N
(       else if\(sf_num[1]\){sbot=m1*m1; stop=sbot+2*pcm*\(pcm+sqrt\(pcm*pcm+sbot\)\);}) N
( ) N
(       else  stop = sqrt_S*sqrt_S;) N
(       ssmax=stop;) N
(    } else ) N
(    {   Real m1=pm[0];) N
(        rapidity=log\(\(P1+sqrt\(P1*P1+m1*m1\)\)/m1 \) ;) N
(    }) N
(    for\(i = 0; i < nout1; ++i\) ) N
(    {) N
(       nsph[i] = 0;) N
(       for\(k=0;k<2;k++\)) N
(       {) N
(          for\(ns=0; ns<10;ns++\)) N
(          {) N
(             sph_inf[i][ns].ncsreg[k] = 0;) N
(             sph_inf[i][ns].ncscut[k] = 0;) N
(          }) N
() S 8 T (  nmsreg[i][k] = 0;) N
() S 8 T (  nmscut[i][k] = 0;) N
(       }) N
(    }) N
(    ) N
(    nss=0;) N
(    for\(l=0; invreg_1[l].lvinvr[0]; l++\) ) N
(    {   int orig=1, ll=0;) N
(        for\(;ll<l;ll++\) {if\( invreg_1[ll].nextrg == l+1\) { orig=0; break;}}) S 80 T () N
() S 8 T (if\(orig\) ) N
() S 8 T ({) N
() S 8 T (   sngpos_\(invreg_1[l].lvinvr, &i, &k, lvbuf\);) N
() S 8 T (   if \(i==0\)  nss = l+1; else) N
() S 8 T (   {  i--; k--;) N
() S 8 T (      if \(lvbuf[0] == 0\)  nmsreg[i][k] = l+1;) N
() S 8 T (      else ) N
() S 8 T (      {) N
() S 8 T () S 16 T ( for \(ns = 0; ns <nsph[i]; ++ns\) ) N
(                 if \(eqvect_\(lvbuf,sph_inf[i][ns].lvpole\)\) ) N
() S 8 T () S 16 T ( {) N
() S 8 T () S 16 T (    sph_inf[i][ns].ncsreg[k] = l+1;) N
() S 8 T () S 16 T (    break;) N
() S 8 T () S 16 T ( }) N
() S 8 T () S 16 T ( if\(ns==nsph[i] && ns<10\)) N
() S 8 T () S 16 T ( {) N
() S 8 T () S 16 T (    nsph[i]++;) N
() S 8 T () S 16 T (    strcpy\(sph_inf[i][ns].lvpole,lvbuf\);) N
() S 8 T () S 16 T (    if \(spole_\(invreg_1[l].lvinvr\)\)sph_inf[i][ns].itypep = -2; ) N
() S 8 T () S 16 T (    else sph_inf[i][ns].itypep = -1;) N
() S 8 T () S 16 T (         ) N
() S 8 T (            sph_inf[i][ns].ncsreg[k] = l+1;) N
() S 8 T (         }) N
() S 8 T (      }) N
() S 8 T (   }) N
() S 8 T (}) N
(    }) N
() N
(    for\(l=0;l<nCuts;l++\) if\( invcut_1[l].key == 'M'\) ) N
(    for\(pList=invcut_1[l].pLists;pList;pList=pList->next\)) N
(    {) N
() S 8 T (sngpos_\(pList->pstr, &i, &k, lvbuf\);) N
(q_kin.inc) (\320\241\321M-^B\321M-^@\320\260\320\275\320\270\321M-^F\320\260 8/10) (15 \320\241\320\265\320\275 08 23:51) title
border
grestore
(\320M-^_\320\265\321M-^G\320\260\321M-^B\320\260\320\273 Alexander Pukhov) rhead
(q_kin.inc) (4/5) (17 \320\241\320\265\320\275\321M-^B\321M-^O\320\261\321M-^@\321M-^O 2008, \320\241\321M-^@\320\265\320\264\320\260) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (if \(i == 0\) rancor_\(&ssmin, &ssmax, 0., 1., l+1\);) N
() S 8 T () N
() S 8 T (else if \(lvbuf[0] == 0\)  nmscut[i-1][k-1] = l+1;) N
() S 8 T (else ) N
() S 8 T ({   i--; k--;) N
() S 8 T (    for \(ns = 0; ns <  nsph[i ]; ++ns\) ) N
() S 8 T (    {) N
() S 8 T () S 16 T (if \(eqvect_\(lvbuf, sph_inf[i][ns].lvpole\)\) ) N
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T (    sph_inf[i][ns].ncscut[k]  = l+1;) N
() S 8 T () S 16 T (    break;) N
() S 8 T () S 16 T (}) N
() S 8 T (    }) N
() S 8 T (    if\(ns==nsph[i] && ns <10 \)) N
() S 8 T (    {) N
() S 8 T (       nsph[i]++;) N
() S 8 T (       strcpy\(sph_inf[i][ns].lvpole,lvbuf\);) N
() S 8 T (       sph_inf[i][ns].itypep = 2;) N
(               sph_inf[i][ns].ncscut[k] = l+1;) N
() S 8 T (    }) N
() S 8 T (}) N
(    }) N
(    if\(nin_int==2 && ssmin>=ssmax\) return 0;) N
(    for\(i = 0; i < nout1; ++i\) ) N
(    {) N
() S 8 T (if \(nsph[i] == 0\) ) N
() S 8 T ({) N
() S 8 T (   nsph[i] = 1;) N
(           sph_inf[i][0].lvpole[0] = \(i == 0 && nin_int == 1 \)?  nvposx:1;) N
() S 8 T (   sph_inf[i][0].lvpole[1] = 0;) N
() S 8 T (   sph_inf[i][0].itypep = 1;) N
() S 8 T (} else ) N
() S 8 T ({) N
() S 8 T (   ns = nsph[i]-1;) N
() S 8 T (   if\(sph_inf[i][ns].ncsreg[0] || sph_inf[i][ns].ncsreg[1]\)  ) N
() S 8 T (   sph_inf[i][0].itypep *=-1;) N
() S 8 T (}) N
(    }) N
() N
(    for\(i = 0; i<nout1; ++i\) ) N
(    {   Real wesum = 0.;) N
() S 8 T (for \(ns = 0; ns<nsph[i]; ++ns\) ) N
() S 8 T ({) N
() S 8 T (    int   nwe = 0;) N
() S 8 T (    for \(k = 0; k < 2; ++k\) ) N
() S 8 T (    for \(l = sph_inf[i][ns].ncsreg[k];l;l=invreg_1[l-1].nextrg\) ++nwe;) N
() S 8 T () S 16 T (    ) N
(            if \(sph_inf[i][ns].itypep >= 0\) ++nwe;) N
() S 8 T (    sph_inf[i][ns].sph_we = nwe;) N
() S 8 T (    wesum += nwe;) N
() S 8 T (}) N
() S 8 T (for \(ns = 0; ns <nsph[i]; ++ns\)   sph_inf[i][ns].sph_we /= wesum;) N
(    }) N
() N
(#ifdef DEBUG   ) N
(    for \(i = 0; i < nout1; ++i\) ) N
(    {   ) N
(        printf\("Decay number %d     nmscut= \(%d,%d\) nmsreg = \(%d,%d\)\\n",) N
(        i, nmscut[i][0], nmscut[i][1],  nmsreg[i][0], nmsreg[i][1]\);) N
(        ) N
(        {int  l,c;) N
(          printf\("kinematics= \("\);) N
(q_kin.inc) (\320\241\321M-^B\321M-^@\320\260\320\275\320\270\321M-^F\320\260 9/10) (15 \320\241\320\265\320\275 08 23:51) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(          for \(l=0;c= kinmtc_1[i].lvin[l];l++\) printf\("%d",c\);) p n
(          printf\("\)->\("\);) N
(          for \(l=0;c=kinmtc_1[i].lvout[0][l];l++\)  printf\("%d",c\);) N
(          printf\("\)+\("\);) N
(          for \(l=0;c=kinmtc_1[i].lvout[1][l];l++\)  printf\("%d",c\);) N
(          printf\("\)\\n"\);) N
(        }        ) N
(        printf\(" summas=\(%f,%f\)\\n",summas[i][0],summas[i][1]\);) N
() N
(        for \(ns = 0; ns < nsph[i]; ++ns\) ) N
() S 8 T ({   int c;) N
() S 8 T (    printf\("   Sphere number = %d  weight=%f type=%d \\n", ) N
() S 8 T (     ns, sph_inf[i][ns].sph_we, sph_inf[i][ns].itypep\);) N
(            printf\("     pole vector\("\);) N
() S 8 T (    for\(k=0; c=sph_inf[i][ns].lvpole[k]; k++\) printf\("%d",c\);) N
(            printf\("\)\\n"\);) N
() S 8 T () S 16 T () N
() S 8 T (    printf\("    ncsreg=\(%d,%d\) ncscut=\(%d,%d\) \\n",) N
() S 8 T (    sph_inf[i][ns].ncsreg[0], sph_inf[i][ns].ncsreg[1], ) N
(            sph_inf[i][ns].ncscut[0], sph_inf[i][ns].ncscut[1]\); ) N
() S 8 T (}) N
(    }    ) N
(#endif ) N
() N
(    return ndim;) N
(} /* mkmom_ */) N
(q_kin.inc) (\320\241\321M-^B\321M-^@\320\260\320\275\320\270\321M-^F\320\260 10/10) (15 \320\241\320\265\320\275 08 23:51) title
border
grestore
(\320M-^_\320\265\321M-^G\320\260\321M-^B\320\260\320\273 Alexander Pukhov) rhead
(q_kin.inc) (5/5) (17 \320\241\320\265\320\275\321M-^B\321M-^O\320\261\321M-^@\321M-^O 2008, \320\241\321M-^@\320\265\320\264\320\260) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
